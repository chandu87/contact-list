{"version":3,"sources":["../src/index.js"],"names":["app","myContactList","ContactList","use","bodyParser","urlencoded","extended","json","set","get","req","res","render","Object","keys","query","length","send","list","filteredData","filter","element","age","name","post","contact","Contact","body","addContact","then","patch","contactToUpdate","updateContact","params","contact_id","delete","deleteContact","listen","console","log"],"mappings":";;AAAA;;;;AACA;;AAIA;;;;;;AAHA,MAAMA,MAAM,wBAAZ;;AAEA,MAAMC,gBAAgB,IAAIC,wBAAJ,CAAgB,gBAAhB,CAAtB;;;AAGAF,IAAIG,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACA;AACAN,IAAIG,GAAJ,CAAQC,qBAAWG,IAAX,EAAR;AACAP,IAAIQ,GAAJ,CAAQ,aAAR,EAAsB,KAAtB;;AAEA;AACAR,IAAIS,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC9B;AACAA,MAAIC,MAAJ,CAAW,OAAX;AACD,CAHD;;AAKA;AACAZ,IAAIS,GAAJ,CAAQ,WAAR,EAAqB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACtC;AACA,MAAI,CAACE,OAAOC,IAAP,CAAYJ,IAAIK,KAAhB,EAAuBC,MAA5B,EAAoC;AAClCL,QAAIM,IAAJ,CAAShB,cAAciB,IAAvB;AACD,GAFD,MAEO;AACL,UAAMC,eAAelB,cAAciB,IAAd,CAAmBE,MAAnB,CAA0BC,WAAW;AACxD,aAAOA,QAAQC,GAAR,IAAeZ,IAAIK,KAAJ,CAAUO,GAAhC;AACD,KAFoB,CAArB;AAGAX,QAAIM,IAAJ,CAASE,aAAaH,MAAb,IAAuB,CAAvB,GAA2B,kCAA3B,GAAgEG,YAAzE;AACD;AACF,CAVD;;AAYA;AACAnB,IAAIS,GAAJ,CAAQ,OAAR,EAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAClCA,MAAIM,IAAJ,CAAS,EAAEM,MAAM,SAAR,EAAT;AACD,CAFD;;AAIA;AACAvB,IAAIwB,IAAJ,CAAS,WAAT,EAAsB,UAASd,GAAT,EAAcC,GAAd,EAAmB;AACvC;AACA,QAAMc,UAAU,IAAIC,oBAAJ,CAAYhB,IAAIiB,IAAhB,CAAhB;AACA1B,gBAAc2B,UAAd,CAAyBH,OAAzB,EAAkCI,IAAlC,CAAuCX,QAAQP,IAAIM,IAAJ,CAASC,IAAT,CAA/C;AACD,CAJD;;AAMA;AACAlB,IAAI8B,KAAJ,CAAU,uBAAV,EAAmC,UAASpB,GAAT,EAAcC,GAAd,EAAmB;AAClD,QAAMoB,kBAAkB,IAAIL,oBAAJ,CAAYhB,IAAIiB,IAAhB,CAAxB;AACFhB,MAAIM,IAAJ,CAAShB,cAAc+B,aAAd,CAA4BtB,IAAIuB,MAAJ,CAAWC,UAAvC,EAAmDH,eAAnD,CAAT;AACD,CAHD;;AAKA;AACA/B,IAAImC,MAAJ,CAAW,uBAAX,EAAoC,UAASzB,GAAT,EAAcC,GAAd,EAAmB;AACrDA,MAAIM,IAAJ,CAAShB,cAAcmC,aAAd,CAA4B1B,IAAIuB,MAAJ,CAAWC,UAAvC,CAAT;AACD,CAFD;;AAIA;AACAlC,IAAIqC,MAAJ,CAAW,IAAX,EAAiB,YAAW;AAC1BC,UAAQC,GAAR,CAAY,0BAAZ;AACD,CAFD","file":"index.js","sourcesContent":["import express from \"express\";\nimport { Contact, ContactList } from \"./ContactList\";\nconst app = express();\n\nconst myContactList = new ContactList(\"./my_list.json\");\nimport bodyParser from \"body-parser\";\n\napp.use(bodyParser.urlencoded({ extended: false }));\n//parse appliation JSON\napp.use(bodyParser.json());\napp.set(\"view engine\",\"ejs\");\n\n//GET ROUTE for HOME\napp.get(\"/\", function(req, res) {\n  // res.send(\"Hello world\");\n  res.render(\"index\");\n});\n\n//GET ROUTE for Contacts\napp.get(\"/contacts\", function(req, res) {\n  //----- Checking whether requested query is empty or not -------\n  if (!Object.keys(req.query).length) {\n    res.send(myContactList.list);\n  } else {\n    const filteredData = myContactList.list.filter(element => {\n      return element.age == req.query.age;\n    });\n    res.send(filteredData.length == 0 ? \"Entered age not found, Try again\" : filteredData);\n  }\n});\n\n//GET ROUTE for sample testing\napp.get(\"/test\", function(req, res) {\n  res.send({ name: \"chandra\" });\n});\n\n//POST ROUTE for Adding contacts\napp.post(\"/contacts\", function(req, res) {\n  // console.log(req.body);\n  const contact = new Contact(req.body);\n  myContactList.addContact(contact).then(list => res.send(list));\n});\n\n//PATCH ROUTE for updating contacts which can be found in POSTMAN\napp.patch(\"/contacts/:contact_id\", function(req, res) {\n    const contactToUpdate = new Contact(req.body);\n  res.send(myContactList.updateContact(req.params.contact_id, contactToUpdate));\n});\n\n//DELETE ROUTE for deleting a item \napp.delete(\"/contacts/:contact_id\", function(req, res) {\n  res.send(myContactList.deleteContact(req.params.contact_id));\n});\n\n//Server listening PORT assignment\napp.listen(3000, function() {\n  console.log(\"Server started at : 3000\");\n});\n"]}