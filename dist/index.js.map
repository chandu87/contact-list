{"version":3,"sources":["../src/index.js"],"names":["app","myContactList","ContactList","use","bodyParser","urlencoded","extended","json","set","get","req","res","render","Object","keys","query","length","contacts","list","filteredData","filter","element","age","send","name","ids","map","contact","id","contactId","indexOf","params","contact_id","updateContact","post","console","log","body","Contact","addContact","redirect","patch","contactToUpdate","delete","deleteContact","listen"],"mappings":"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","file":"index.js","sourcesContent":["import express from \"express\";\nimport { Contact, ContactList } from \"./ContactList\";\nconst app = express();\nimport methodOverride from 'method-override';\n\nconst myContactList = new ContactList(\"./my_list.json\");\nimport bodyParser from \"body-parser\";\n\napp.use(bodyParser.urlencoded({ extended: false }));\n//parse appliation JSON\napp.use(bodyParser.json());\napp.set(\"view engine\",\"ejs\");\napp.use(methodOverride(\"_method\"));\n\n//GET ROUTE for HOME\napp.get(\"/\", function(req, res) {\n  // res.send(\"Hello world\");\n  res.render(\"index\");\n});\n\n//GET ROUTE for Contacts\napp.get(\"/contacts\", function(req, res) {\n  //----- Checking whether requested query is empty or not -------\n  if (!Object.keys(req.query).length) {\n    // res.send(myContactList.list);\n    res.render(\"contacts\", {contacts :myContactList.list});\n  } else {\n    const filteredData = myContactList.list.filter(element => {\n      return element.age == req.query.age;\n    });\n    res.send(filteredData.length == 0 ? \"Entered age not found, Try again\" : filteredData);\n  }\n});\n\n//GET ROUTE for sample testing\napp.get(\"/test\", function(req, res) {\n  res.send({ name: \"chandra\" });\n});\napp.get(\"/contacts/add\", function(req, res){\n  res.render(\"add\");\n});\napp.get(\"/contacts/edit\", function(req, res){\n  res.render(\"edit\", {contacts :myContactList.list});\n});\napp.get(\"/contacts/update/:contact_id\", function(req, res){\n  const ids = myContactList.list.map(contact => contact.id);\n  const contactId = ids.indexOf(req.params.contact_id);\n  const updateContact = myContactList.list[contactId];\n  // console.log(contactId);\n  // console.log(myContactList.list);\n  // console.log(updateContact);\n  res.render(\"update\", {updateContact : updateContact});\n});\n//POST ROUTE for Adding contacts\napp.post(\"/contacts\", function(req, res) {\n  // console.log(req.body);\n  console.log(req.body);\n  const contact = new Contact(req.body);\n  console.log(contact)\n  // myContactList.addContact(contact).then(list => res.send(list));\n  myContactList.addContact(contact);\n  res.redirect(\"/contacts\");\n});\n\n//PATCH ROUTE for updating contacts which can be found in POSTMAN\napp.patch(\"/contacts/:contact_id\", function(req, res) {\n    const contactToUpdate = new Contact(req.body);\n    myContactList.updateContact(req.params.contact_id, contactToUpdate);\n  res.redirect(\"/contacts\");\n});\n\n//DELETE ROUTE for deleting a item \napp.delete(\"/contacts/:contact_id\", function(req, res) {\n  //res.send(myContactList.deleteContact(req.params.contact_id));\n  myContactList.deleteContact(req.params.contact_id);\n  res.redirect(\"/contacts\");\n});\n\n//Server listening PORT assignment\napp.listen(3000, function() {\n  console.log(\"Server started at : 3000\");\n});\n"]}